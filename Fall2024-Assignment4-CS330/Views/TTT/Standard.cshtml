@model Fall2024_Assignment4_CS330.Models.TTTModel
@{
    ViewBag.Title = "Tic Tac Toe";
    var playerColor = Model.CurrentPlayer == 'X' ? "text-danger" : "text-info";
    var pointerEvents = Model.Status == Status.Active ? "all" : "none";
    string opp = "";
    var time = Model.MaxTime;
}

<script>
    console.log("Player " + "@Model.CurrentPlayer" + "'s turn!");
</script>

<script>
    let maxTime = @time;
    // ensure the video does not fully restart upon refresh
    document.addEventListener("DOMContentLoaded", () => {
        const video = document.getElementById("roku-video");
        const STORAGE_KEY = "videoPlaybackTime";

        if (!video) {
            console.error("Video element not found. Check your HTML for the correct ID.");
            return;
        }

        // Ensure the video is ready before setting currentTime
        video.addEventListener("loadedmetadata", () => {
            const savedTime = localStorage.getItem(STORAGE_KEY);
            if (savedTime) {
                video.currentTime = parseFloat(savedTime);
            }
        });

        // Save playback time every second
        const updatePlaybackTime = () => {
            if (!isNaN(video.currentTime)) {
                localStorage.setItem(STORAGE_KEY, video.currentTime);
            }
        };

        // Save playback time periodically
        const saveInterval = setInterval(updatePlaybackTime, 1000);

        // Cleanup on page unload
        window.addEventListener("beforeunload", () => {
            updatePlaybackTime();
            clearInterval(saveInterval);
        });
    });
</script>

<div class="video-background">
    <video id="roku-video" autoplay loop muted playsinline preload="auto">
        <source src="/lib/roku_60fps_interpolated.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
</div>

<div class="container d-flex flex-column justify-content-center align-items-center text-center">
    <div class="decorative-background p-4 rounded mb-3">
        <h2 class="text-primary m-0">Tic Tac Toe - @Model.Mode - <span class="@playerColor">@Model.CurrentPlayer</span></h2>
    </div>
    <div>
        <table class="board" border="1" style="border-collapse: collapse; width: 450px; height: 450px; text-align: center; pointer-events: @pointerEvents;">
            @for (int x = 0; x < 3; x++) // Board rows
            {
                <tr>
                    @for (int y = 0; y < 3; y++) // Board columns
                    {
                        var winner = Model.CheckGridWinner(x, y);
                        var gridClass = "";
                        var cellClass = "";
                        if (winner == 'X') 
                        {
                            gridClass = "claimed-x";
                        } 
                        else if (winner == 'O') 
                        {
                            gridClass = "claimed-o";
                        } 
                        else if (!Model.IsGridPlayable(x, y))
                        {
                            gridClass = "tied-grid";
                        }

                        if (Model.RestrictedGrid == x * 3 + y) cellClass = "restricted-grid";
                    
                        <td style="width: 150px; height: 150px;">
                            <table class="grid @gridClass" border="1" style="border-collapse: collapse; width: 100%; height: 100%; text-align: center;">
                                @for (int z = 0; z < 3; z++) // Grid rows
                                {
                                    <tr>
                                        @for (int w = 0; w < 3; w++) // Grid columns
                                        {
                                            var textColor = "";
                                            if (Model.Board[x, y, z, w] == 'X') textColor = "text-danger";
                                            if (Model.Board[x, y, z, w] == 'O') textColor = "text-info";

                                            <td class="cell" style="width: 50px; height: 50px;">
                                                @if (Model.Board[x,y,z,w] == '\0')
                                                {
                                                    <form method="post" action="@Url.Action("MakeMove", "TTT")" style="display: inline;">
                                                        <input type="hidden" name="gridRow" value="@x" />
                                                        <input type="hidden" name="gridCol" value="@y" />
                                                        <input type="hidden" name="cellRow" value="@z" />
                                                        <input type="hidden" name="cellCol" value="@w" />
                                                        <button class=@cellClass type="submit" style="width: 100%; height: 100%; font-size: 20px;"></button>
                                                    </form>
                                                }
                                                else
                                                {
                                                    <h4 class=@textColor>@Model.Board[x,y,z,w]</h4>
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            </table>
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
    @if (Model.Mode != "Online")
    {
        <div class="hintDiv p-3">
            <form method="post" action="@Url.Action("GetHint", "TTT")">
                <button type="submit" id="getHintButton">Get a Hint</button>
            </form>
            <p id="hintText">
                @ViewBag.Hint
            </p>
        </div>
    }
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Update game status every 200ms (0.2 seconds)
        setInterval(function () {
            $.ajax({
                url: '@Url.Action("GetGameStatus", "TTT")', // URL to fetch game status
                method: 'GET',
                success: function (data) {
                    // Update the timer display
                    $('#player1-time').text(data.player1Time.toFixed(1) + "s");
                    $('#player2-time').text(data.player2Time.toFixed(1) + "s");

                    // Update the message if there is one
                    if (data.message) {
                        $('#game-message').text(data.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching game status:", error);
                }
            });
        }, 200);
    });
</script>
<div class="decorative-background p-4 rounded mb-3">
    <div id="game-message">
        @if (ViewBag.Message != null)
        {
            <h3 class="text-secondary">@ViewBag.Message</h3>
        }
    </div>

    <div id="timer-display">
        <p>Player 1 Time: <span id="player1-time">@Model.Player1Time.ToString("F1")</span></p>
        <p>Player 2 Time: <span id="player2-time">@Model.Player2Time.ToString("F1")</span></p>
    </div>
    @if (Model.Mode != "Online")
    {
        <form method="get" action="@Url.Action("Reset", "TTT")">
            <button class="btn btn-primary" type="submit" style="margin-top: 20px;">Restart Game</button>
        </form>
    }
</div>
